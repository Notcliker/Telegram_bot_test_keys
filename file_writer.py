"""
üîß –ù–∞–∑–≤–∞–Ω–∏–µ: ü§ñ –ê–≤—Ç–æ-–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¢–µ—Å—Ç-–ö–µ–π—Å–æ–≤ Telegram-–±–æ—Ç 
üë§ –ê–≤—Ç–æ—Ä: Metiso4kas
üìÖ –ò—é–Ω—å 2025
üíº –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: Telegram —é–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤
üõ° –õ–∏—Ü–µ–Ω–∑–∏—è: MIT

## üìú –û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏

- üõ†Ô∏è –î–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —É—á–µ–±–Ω—ã—Ö –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π.
- üë§ –ê–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
- ‚ùå –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–∞."

üì¢ –û—Ç–∫–∞–∑ –æ—Ç —Å–≤—è–∑–∏ —Å Telegram

–î–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏ –Ω–µ –∞—Ñ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω —Å Telegram.  
Telegram –∏ –ª–æ–≥–æ—Ç–∏–ø Telegram —è–≤–ª—è—é—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏ –∏—Ö –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–π.  
–ü—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–µ Telegram Bot API —Å–æ–≥–ª–∞—Å–Ω–æ [–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏](https://core.telegram.org/bots/api).
–û–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º Telegram Inc.

"""
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import mm
import os
import uuid
import pandas as pd
from textwrap import wrap


# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ keys
os.makedirs("keys", exist_ok=True)

def save_to_xlsx(text):
    cases = text.strip().split('---')
    data = []

    for case in cases:
        lines = case.strip().split('\n')
        entry = {"ID": "", "–ù–∞–∑–≤–∞–Ω–∏–µ": "", "–ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è": "", "–®–∞–≥–∏": "", "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç": "", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": ""}
        current_field = None
        steps = []

        for line in lines:
            if line.startswith("ID:"):
                entry["ID"] = line[3:].strip()
            elif line.startswith("–ù–∞–∑–≤–∞–Ω–∏–µ:"):
                entry["–ù–∞–∑–≤–∞–Ω–∏–µ"] = line[9:].strip()
            elif line.startswith("–ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è:"):
                entry["–ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è"] = line[13:].strip()
            elif line.startswith("–®–∞–≥–∏:"):
                current_field = "–®–∞–≥–∏"
                steps = []
            elif line.startswith("–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:"):
                entry["–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"] = line[20:].strip()
                current_field = None
            elif line.startswith("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:"):
                entry["–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"] = line[11:].strip()
                current_field = None
            elif current_field == "–®–∞–≥–∏":
                steps.append(line.strip())

        entry["–®–∞–≥–∏"] = '\n'.join(steps)
        if entry["ID"]:
            data.append(entry)

    df = pd.DataFrame(data)
    path = os.path.join("keys", f'testcases_{uuid.uuid4().hex[:6]}.xlsx')
    df.to_excel(path, index=False)
    return path
def wrap_text(text, font_name, font_size, max_width):
    words = text.split()
    lines = []
    line = ""

    for word in words:
        test_line = line + word + " "
        if pdfmetrics.stringWidth(test_line, font_name, font_size) <= max_width:
            line = test_line
        else:
            lines.append(line.rstrip())
            line = word + " "
    if line:
        lines.append(line.rstrip())

    return lines

def save_to_pdf(text):
    path = os.path.join("keys", f'testcases_{uuid.uuid4().hex[:6]}.pdf')
    c = canvas.Canvas(path, pagesize=A4)
    width, height = A4
    margin = 20 * mm
    usable_width = width - 2 * margin
    y = height - margin
    line_height = 14

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    font_path = os.path.join("fonts", "DejaVuSans.ttf")
    font_name = "DejaVu"
    font_size = 11
    pdfmetrics.registerFont(TTFont(font_name, font_path))
    c.setFont(font_name, font_size)

    for block in text.strip().split('---'):
        block = block.strip()
        if not block:
            continue
        for line in block.split('\n'):
            for wrapped_line in wrap_text(line, font_name, font_size, usable_width):
                if y < margin:
                    c.showPage()
                    c.setFont(font_name, font_size)
                    y = height - margin
                c.drawString(margin, y, wrapped_line)
                y -= line_height
            y -= 5
        y -= line_height

    c.save()
    return path
